#!/usr/bin/env bash

set -e      # Exit immediately if any command fails
set -u      # Using undefined variables is an error. Exit immediately

# Utilities
# ---------

progress() { echo "== $@" ; }
warning()  { echo -e "WARNING:" "$@" >&2 ; }
die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }

success()  { echo -e "\e[32m== success: $@\e[0m" ;
             echo "$@" >> "$now_passing"
           }
failure()  { echo -e "\e[31m== failure: $@\e[0m" ; }

pretty_diff() {
    if type colordiff >/dev/null 2>&1; then
        colordiff -u -b "$@"
    else
        diff -u -b "$@"
    fi
}

lint_krun() {
    # Format, &gt; entity > and make each K task start on a new line
    xmllint -format - | sed -e 's/&gt;/>/g'  -e 's/~>/\n   ~>/g'
}

# Environment Setup
# -----------------

run_env() {
    local run_file=$1
    local cmode=""
    local cschedule=${cSCHEDULE:-DEFAULT}
    local release_dir="$(pwd)/.build/k/k-distribution/target/release/k"
    local lib_dir="$(pwd)/.build/local/lib"
    case "$run_file" in
       *gas-analysis/*   ) cmode="GASANALYZE" ;;
       *VMTests/*        ) cmode="VMTESTS"    ;;
       *BlockchainTests/*) cmode="NORMAL"     ;;
       *proofs/*         ) cmode="NORMAL"     ;;
       *                 ) die "Don't know how to set 'MODE' for '$run_file'" ;;
    esac
    export cMODE="$cmode"
    export cSCHEDULE="$cschedule"
    export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
    export LD_LIBRARY_PATH="$release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"
    eval $(opam config env)
}

# Runners
# -------

run_krun() {
    local run_file=$1 ; shift
    local backend=$1  ; shift
    run_env "$run_file"
    export K_OPTS=-Xss500m
    krun --debug --directory .build/$backend/ -cSCHEDULE="$cSCHEDULE" -cMODE="$cMODE" "$run_file" "$@"
}

run_interpreter() {
    test_file="$1"
    run_env "$test_file"
    (   set +e
        interpreter="$(dirname "$0")/.build/ocaml/driver-kompiled/interpreter"
        kast="$(mktemp)"
        output="$(mktemp)"
        kast_output="$(mktemp)"
        trap "rm -rf $kast $output $kast_output" INT TERM EXIT
        "$(dirname "$0")/kast-json.py" "$test_file" > "$kast"
        set +e
        $interpreter "$(dirname "$0")/.build/ocaml/driver-kompiled/realdef.cma" -c PGM "$kast" textfile \
                     -c SCHEDULE '`DEFAULT_EVM`(.KList)' text -c MODE "\`${cMODE}_EVM\`(.KList)" text \
                     --output-file "$output"
        exit_status="$?"
        k-bin-to-text "$output" "$kast_output"
        cat "$kast_output"
        printf "\n"
        exit "$exit_status"
    )
}

run_proof() {
    local proof_file="$1" ; shift
    [[ -f "$proof_file" ]] || die "$proof_file does not exist"
    run_env "$proof_file"
    export K_OPTS=-Xmx2G
    ( krun --directory .build/java/ -cSCHEDULE=${cSCHEDULE} -cMODE=${cMODE} \
         --z3-executable tests/templates/dummy-proof-input.json --prove "$proof_file" \
         </dev/null # grumble grumble `krun --prove` consumes stdin
    )
}

run_kdebug() {
    progress "debugging: $1"
    ( run_krun "$1" java --debug --debugger )
}

run_test() {
    test_file="$1"; shift
    case "$test_file" in
        *proofs/*      ) ( pretty_diff --label expected <(echo "true") \
                                       --label actual   <(run_proof "$test_file")
                         )
                         ;;
        *gas-analysis/*) [[ -f "$test_file.out" ]] && output_expected_file="$test_file.out"
                         ( pretty_diff --label expected <(cat "$output_expected_file") \
                                       --label actual   <(run_krun "$test_file" ocaml | lint_krun )
                         )
                         ;;
        *              ) output_expected_file=tests/templates/output-success.txt
                         [[ -f "$test_file.out" ]] && output_expected_file="$test_file.out"
                         ( pretty_diff --label expected <(cat "$output_expected_file") \
                                       --label actual   <(run_interpreter "$test_file" )
                         )
                         ;;
    esac
}

# Main
# ----

cd "$(dirname $0)"

# test logs
test_logs=".build/logs"
mkdir -p "$test_logs"
now_passing="$test_logs/passing.lastrun"

# main functionality
run_command="$1" ; shift
case "$run_command" in

    # Running
    run)   run_krun   "$1" ;;
    debug) run_kdebug "$1" ;;
    prove) run_proof  "$1" ;;

    # Testing
    test)  run_test   "$1" ;;

    *) echo "
    usage:

       # Running
       # -------
       $0 run   <pgm>   Run a single EVM program
       $0 debug <pgm>   Run a single EVM program in the debugger
       $0 prove <spec>  Attempt to prove the specification using K's RL prover

       Note: <pgm> and <spec> here are paths to files, *not* test lists.
       These files should be Ethereum programs (or specifications).

       Examples:
       $ ./Build run   tests/ethereum-tests/VMTests/vmArithmeticTest/add0.json
       $ ./Build debug tests/gas-analysis/sumTo10.evm
       $ ./Build prove tests/proofs/sum-to-n-spec.k

       # Testing
       # -------
       $0 test  <pgm>   Run a single EVM program like it's a test

       Note: This command is more for devs and CI servers.
" ; exit ;;
esac
