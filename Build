#!/usr/bin/env bash

set -e      # Exit immediately if any command fails
set -u      # Using undefined variables is an error. Exit immediately

# Utilities
# ---------

echoerr()  { echo >&2 "$@" ; }
progress() { echoerr "== $@" ; }
warning()  { echoerr -e "WARNING:" "$@" ; }
die()      { echoerr -e "FATAL:" "$@" ; exit 1 ; }

success()  { echoerr -e "\e[32m== success: $@\e[0m" ;
             echoerr "$@" >> "$now_passing"
           }
failure()  { echoerr -e "\e[31m== failure: $@\e[0m" ; }

pretty_diff() {
    if type colordiff >/dev/null 2>&1; then
        colordiff -u -b "$@"
    else
        diff -u -b "$@"
    fi
}

run_make() { make -s "$@" ; }

lint_krun() {
    # Format, &gt; entity > and make each K task start on a new line
    xmllint -format - | sed -e 's/&gt;/>/g'  -e 's/~>/\n   ~>/g'
}

# Test Filters and Lists
# ----------------------

filter_tests() {
    local command=( exit 1 )
    case $# in
    0) cat;        return ;;
    1) grep "$1" ; return ;;
    *) cat > /dev/null
       warning "Too many expressions"
       ;;
    esac
}

list_bchain() { run_make split-bchain-tests ; find "tests/BlockchainTests" -name '*.json'   | grep -v -e "Constantinople" -e "Byzantium" ; }
list_proof()  { run_make split-proof-tests  ; find "tests/proofs"          -name '*-spec.k' ; }
test_lists="bchain proof"

list_vm()           { run_make vm-tests                    ; find "tests/ethereum-tests/VMTests" -name "*.json" ; }
list_short()        { run_make vm-tests split-bchain-tests ; cat tests/short-list ; }
list_gas_analysis() { find "tests/gas-analysis" -name '*.evm' ; }
test_lists="$test_lists vm short gas_analysis"

list_all()   { list_vm ; list_bchain ; list_gas_analysis ; list_proofs ; }
list_quick() { list_all | sort -R | head -n 20 ; }
test_lists="$test_lists all quick"

list_tests() {
    local test_list="$1"
    [[ "$test_lists" != *" $test_list "* ]] \
        && [[ "$test_lists" != "$test_list "* ]] \
        && [[ "$test_lists" != *" $test_list" ]] \
        && die "Test list '$test_list' does not exist."
    list_"$test_list"
}

# Runners
# -------

run_krun() {
    local run_file=$1; shift
    local backend=$1; shift
    local krun_opts=()
    export K_OPTS="-Xss500m -Xmx5G"
    export cSCHEDULE=${cSCHEDULE:-DEFAULT}
    case "$run_file" in
       *gas-analysis/*   ) krun_opts=( -cMODE=GASANALYZE "$run_file" ) ;;
       *VMTests/*        ) krun_opts=( -cMODE=VMTESTS    "$run_file" ) ;;
       *BlockchainTests/*) krun_opts=( -cMODE=NORMAL     "$run_file" ) ;;
       *                 ) die "Don't know how to set 'krun_opts' for '$run_file'" ;;
    esac
    krun --debug --directory .build/$backend/ -cSCHEDULE=${cSCHEDULE} "${krun_opts[@]}" "$@"
}

run_interpreter() {
    test_file="$1"
    case "$test_file" in
       *gas-analysis/*   ) mode=GASANALYZE                                     ;;
       *VMTests/*        ) mode=VMTESTS                                        ;;
       *BlockchainTests/*) mode=NORMAL                                         ;;
       *                 ) die "Don't know how to set 'mode' for '$test_file'" ;;
    esac
    (   set +e
        interpreter="$(dirname "$0")/.build/ocaml/driver-kompiled/interpreter"
        kast="$(mktemp)"
        output="$(mktemp)"
        kast_output="$(mktemp)"
        trap "rm -rf $kast $output $kast_output" INT TERM EXIT
        "$(dirname "$0")/kast-json.py" "$test_file" > "$kast"
        set +e
        $interpreter "$(dirname "$0")/.build/ocaml/driver-kompiled/realdef.cma" -c PGM "$kast" textfile \
                     -c SCHEDULE '`DEFAULT_EVM`(.KList)' text -c MODE "\`${mode}_EVM\`(.KList)" text \
                     --output-file "$output"
        exit_status="$?"
        k-bin-to-text "$output" "$kast_output"
        cat "$kast_output"
        printf "\n"
        exit "$exit_status"
    )
}

run_proof() {
    run_make
    export K_OPTS=-Xmx2G
    local proof_file="$1" ; shift
    [[ -f "$proof_file" ]] || die "$proof_file does not exist"
    local cSCHEDULE=${cSCHEDULE:-DEFAULT}
    local cMODE=${cMODE:-NORMAL}
    ( krun --directory .build/java/ -cSCHEDULE=${cSCHEDULE} -cMODE=${cMODE} \
         --z3-executable tests/templates/dummy-proof-input.json --prove "$proof_file" \
         </dev/null # grumble grumble `krun --prove` consumes stdin
    )
}

run_krun() {
    run_make
    progress "running: $1"
    [[ -f "$1" ]] || die "$1 does not exist"
    ( run_ocaml "$1" )
}

run_kdebug() {
    run_make
    progress "debugging: $1"
    ( run_java "$1" java --debug --debugger )
}

# Testers
# -------

run_test() {
    run_make
    test_file="$1"; shift
    case "$test_file" in
        *proofs/*      ) ( pretty_diff --label expected <(echo "true") \
                                       --label actual   <(run_proof "$test_file")
                         )
                         ;;
        *gas-analysis/*) [[ -f "$test_file.out" ]] && output_expected_file="$test_file.out"
                         ( pretty_diff --label expected <(cat "$output_expected_file") \
                                       --label actual   <(run_krun "$test_file" ocaml | lint_krun )
                         )
                         ;;
        *              ) output_expected_file=tests/templates/output-success.txt
                         [[ -f "$test_file.out" ]] && output_expected_file="$test_file.out"
                         ( pretty_diff --label expected <(cat "$output_expected_file") \
                                       --label actual   <(run_interpreter "$test_file" )
                         )
                         ;;
    esac
}

run_tests() {
    local test_count=0
    local test_failed=0
    run_make
    while read test_file ; do
        progress "running: $test_file"
        test_count=$(($test_count + 1))
        exit_status=0
        run_test "$test_file" || exit_status=$?
        if [[ $exit_status -eq 0 ]] ; then
            success "$test_file"
        else
            failure "$test_file"
            test_failed=$(($test_failed + 1))
        fi
        progress "failed: $test_failed / $test_count"
    done
    return $test_failed
}

run_partests() {
    run_make
    exit_status=0
    parallel --joblog - ./Build test || exit_status="$?"
    return "$exit_status"
}

# Main
# ----

cd "$(dirname $0)"

# test logs
test_logs=".build/logs"
mkdir -p "$test_logs"
now_passing="$test_logs/passing.lastrun"

# main functionality
[[ "$#" == '0' ]] && set make build
run_command="$1" ; shift
case "$run_command" in

    # Building
    make) run_make $@ ;;

    # Running
    run)    run_krun   "$1" ;;
    test)   run_test   "$1" ;;
    debug)  run_kdebug "$1" ;;
    prove)  run_proof  "$1" ;;

    # Testing
    list)                list_tests $1 | filter_tests "${@:2}" ;;
    tests)     list_tests $1 | filter_tests "${@:2}" | run_tests    ;;
    partests)  list_tests $1 | filter_tests "${@:2}" | run_partests ;;

    *)             echo "
    usage:
       $0       Defaults to '$0 make build'

       # Building
       # --------
       $0 make <target>     Run 'make <target>'

       Useful <target>:
       -   defn:   Build the K definition files from the markdown files (requires pandoc)
       -   build:  Kompile the definition (calls defn target first)
       -   deps:   Download and build dependencies
       -   sphinx: Build Sphinx HTML documentation from semantics

       # Running
       # -------
       $0 run   <pgm>   Run a single EVM program
       $0 test  <pgm>   Run a single EVM program like it's a test
       $0 debug <pgm>   Run a single EVM program in the debugger
       $0 prove <spec>  Attempt to prove the specification using K's RL prover

       Note: <pgm> and <spec> here are paths to files, *not* test lists.
       These files should be Ethereum programs (or specifications).

       Examples:
       $ ./Build run   tests/ethereum-tests/VMTests/vmArithmeticTest/add0.json
       $ ./Build debug tests/gas-analysis/sumTo10.evm
       $ ./Build prove tests/proofs/sum-to-n-spec.k

       # Testing
       # -------
       $0 list     <test-list> <regx>   List tests from <test-list> filtered by <regx>
       $0 tests    <test-list> <regx>   Run tests from <test-list> filtered by <regx>
       $0 partests <test-list> <regx>   Run tests from <test-list> filtered by <regx> with GNU parallel

       Available <test-list>: $test_lists
" ; exit ;;
esac
